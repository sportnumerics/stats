AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  Stage:
    Type: String
    AllowedValues:
      - dev
      - prodblue
      - prodgreen
Resources:
  DeploymentBucket:
    Type: AWS::S3::Bucket
  ContainerRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName:
        Fn::Sub: "sportnumerics-stats-${Stage}"
  Cluster:
    Type: AWS::ECS::Cluster
  Task:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
      - Name: stats
        Image:
          Fn::Sub: "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/sportnumerics-stats-${Stage}:latest"
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: EcsLogs
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix:
              Fn::Sub: "stats-${Stage}"
        Environment:
        - Name: RESULTS_BUCKET
          Value:
            Ref: ResultsBucket
        - Name: STAGE
          Value:
            Ref: Stage
        - Name: AWS_DEFAULT_REGION
          Value:
            Ref: AWS::Region
        - Name: PREDICT_LAMBDA_ARN
          Value:
            Fn::Sub: "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:sportnumerics-predict-${Stage}-predict"
      Memory: 1GB
      Cpu: 256
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Ref: TaskRole
      ExecutionRoleArn:
        Ref: TaskExecutionRole
      NetworkMode: awsvpc
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: TaskExecutionRole
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: TaskRole
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 's3:putObject'
                Resource:
                  - Fn::Join:
                    - '/'
                    - - Fn::GetAtt: [ResultsBucket, Arn]
                      - '*'
              - Effect: Allow
                Action: 'lambda:InvokeFunction'
                Resource:
                  Fn::Sub: "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:sportnumerics-predict-${Stage}-predict"
  TaskEventRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(24 hours)
      Targets:
        - Id: BootstrapTarget
          Arn:
            Fn::GetAtt: [BootstrapLambdaFunction, Arn]
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: BootstrapLambdaFunction
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
  BootstrapLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code: ./bootstrap.py
      Environment:
        Variables:
          ECS_CLUSTER:
            Ref: Cluster
          ECS_TASK:
            Ref: Task
      Handler: bootstrap.handler
      Role:
        Fn::GetAtt: [BootstrapLambdaRole, Arn]
      Runtime: python3.6
  BootstrapLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: BootstrapLambdaRole
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ecs:RunTask'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource:
                  - Fn::GetAtt: [TaskExecutionRole, Arn]
                  - Fn::GetAtt: [TaskRole, Arn]
  EcsLogs:
    Type: AWS::Logs::LogGroup
  ResultsBucket:
    Type: AWS::S3::Bucket
Outputs:
  ResultsBucketName:
    Description: Teams bucket
    Value:
      Ref: ResultsBucket
  DeploymentBucketName:
    Description: Deployment bucket to upload deployable resources
    Value:
      Ref: DeploymentBucket
