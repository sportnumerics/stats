Resources:
  TeamsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: season
          AttributeType: S
        - AttributeName: div
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: season
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: schedule
          KeySchema:
            - AttributeName: season
              KeyType: HASH
            - AttributeName: div
              KeyType: RANGE
          Projection:
            NonKeyAttributes:
              - name
              - schedule
              - ratings
            ProjectionType: INCLUDE
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 10
      TableName: ${file(serverless.yml):custom.teamsTableName}
  DivisionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: season
          AttributeType: S
      KeySchema:
        - AttributeName: season
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: ${file(serverless.yml):custom.divisionsTableName}
  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: 
        !Sub
          - |-
            {
              "Comment": "Orchestration for collecting stats",
              "StartAt": "CollectAllTeamsForReduction",
              "States": {
                "CollectAllTeamsForReduction": {
                  "Type": "Task",
                  "Resource": "${collectAllForReductionArn}"
                  "Next": "ReduceOneTeam"
                },
                "ReduceOneTeam": {
                  "Type": "Task",
                  "Resource": "${reduceOneTeamArn}",
                  "Next": "Check"
                },
                "Check": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.done",
                      "BooleanEquals": true,
                      "Next": "Success"
                    }
                  ],
                  "Default": "ReduceOneTeam"
                },
                "Success": {
                  "Type": "Succeed"
                }
              }
            }
          - collectAllForReductionArn: !GetAtt CollectAllTeamsForReductionLambdaFunction.Arn
            reduceOneTeamArn: !GetAtt ReduceOneTeamLambdaFunction.Arn
      RoleArn: !GetAtt StateMachineRole.Arn
  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: StateMachinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "lambda:InvokeFunction"
                Resource:
                  - !GetAtt CollectAllTeamsForReductionLambdaFunction.Arn
                    !GetAtt ReduceOneTeamLambdaFunction.Arn
Outputs:
  DivsTableName:
    Description: Divs table name in DynamoDB
    Value:
      Ref: DivisionsTable
  TeamsTableName:
    Description: Teams table name in DynamoDB
    Value:
      Ref: TeamsTable
